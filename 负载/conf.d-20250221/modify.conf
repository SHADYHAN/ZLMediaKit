content_by_lua_block {
    local backend_list = ngx.shared.backend_list
    local backend_ips = ngx.shared.backend_ips
    local high_traffic = ngx.shared.high_traffic_backends

    -- 读取客户端发送的数据
    local sock, err = ngx.req.socket()
    if not sock then
        ngx.log(ngx.ERR, "Failed to get socket: ", err)
        return sock:send("ERROR: Socket connection failed\n")
    end

    -- 接收数据并清理换行符
    local data, err = sock:receive()
    data = data and data:gsub("[\r\n]", "") or nil

    if not data then
        ngx.log(ngx.ERR, "Data receive failed: ", err)
        return sock:send("ERROR: Data receive failed\n")
    end

    -- 解析命令（保持原始逻辑）
    local command, arg1, arg2 = string.match(data, "^([%w_]+)%s*([^%s]*)%s*([^%s]*)$")

    -- IP验证函数
    local function validate_ip(ip)
        return ip and string.match(ip, "^%d+%.%d+%.%d+%.%d+$")
    end

    -- 原有命令处理逻辑保持不变
    if command == "UPDATE_BACKEND" then
        -- 清理输入数据
        local raw_input = arg1:gsub("%s+", ""):gsub(",+$", "")
        local backends = {}

        for ip in string.gmatch(raw_input, "([^,]+)") do
            if not validate_ip(ip) then
                return sock:send("ERROR: Invalid IP: "..ip.."\n")
            end
            table.insert(backends, ip)
        end

        if #backends == 0 then
            return sock:send("ERROR: Empty backend list\n")
        end

        local ok, err = backend_list:set("backends", table.concat(backends, ","))
        if not ok then
            return sock:send("ERROR: Update failed: "..tostring(err).."\n")
        end
        return sock:send("OK: Backends updated: "..table.concat(backends, ", ").."\n")

    -- 新增高流量管理命令
    elseif command == "MARK_HIGH_TRAFFIC" then
        if not validate_ip(arg1) then
            return sock:send("ERROR: Invalid IP format\n")
        end

        -- 验证IP是否在后端列表中
        local current_backends = backend_list:get("backends") or ""
        if not string.find(current_backends, arg1) then
            return sock:send("ERROR: IP not in backend list\n")
        end

        local ok, err = high_traffic:set(arg1, true)
        if not ok then
            return sock:send("ERROR: Mark failed: "..tostring(err).."\n")
        end
        return sock:send("OK: "..arg1.." marked as high traffic\n")

    elseif command == "UNMARK_HIGH_TRAFFIC" then
        if not validate_ip(arg1) then
            return sock:send("ERROR: Invalid IP format\n")
        end

        high_traffic:delete(arg1)
        return sock:send("OK: "..arg1.." unmarked from high traffic\n")

    -- 增强显示命令（保持原始数据显示）
    elseif command == "SHOW_BACKEND_LIST" then
        local raw_data = backend_list:get("backends") or ""
        ngx.log(ngx.INFO, "DEBUG: Stored raw data: [", raw_data, "]")  -- 添加调试日志
        
        local output = string.format([[
    Backend List:       %s
    High Traffic Nodes: %s
    Client Mappings:    %d entries
    ]], 
        raw_data,  -- 直接显示原始数据
        #traffic_list > 0 and table.concat(traffic_list, ", ") or "none",
        #backend_ips:get_keys(0)
        )
        return sock:send(output)
    -- 原有其他命令保持不变
    elseif command == "UPDATE_BACKEND_IP" then
        if not validate_ip(arg1) or not validate_ip(arg2) then
            return sock:send("ERROR: Invalid IP format\n")
        end

        local ok, err = backend_ips:set(arg1, arg2)
        if not ok then
            return sock:send("ERROR: Update failed: "..tostring(err).."\n")
        end
        return sock:send("OK: Mapping updated: "..arg1.." => "..arg2.."\n")

    elseif command == "CLEAR_BACKEND_IPS" then
        backend_ips:flush_all()
        return sock:send("OK: All client mappings cleared\n")

    elseif command == "SHOW_BACKEND_IPS" then
        local keys = backend_ips:get_keys(0) or {}
        local result = {"Client IP Mappings:"}
        for _, key in ipairs(keys) do
            table.insert(result, string.format("%-15s => %s", key, backend_ips:get(key)))
        end
        return sock:send(table.concat(result, "\n").."\n")

    else
        sock:send([[
ERROR: Unknown command
Available Commands:
UPDATE_BACKEND <ip1,ip2,...>    Update backend servers
MARK_HIGH_TRAFFIC <ip>          Mark backend as high traffic
UNMARK_HIGH_TRAFFIC <ip>        Remove high traffic mark
SHOW_BACKEND_LIST               Show backend list with status
UPDATE_BACKEND_IP <c_ip> <b_ip> Modify client mapping
CLEAR_BACKEND_IPS               Clear all client mappings
SHOW_BACKEND_IPS                List all client mappings
]])
    end
}
